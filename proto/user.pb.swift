// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: user.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public enum Loker_Level: SwiftProtobuf.Enum {
  public typealias RawValue = Int
  case unknown // = 0
  case admin // = 1
  case member // = 2
  case perusahaan // = 3
  case UNRECOGNIZED(Int)

  public init() {
    self = .unknown
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unknown
    case 1: self = .admin
    case 2: self = .member
    case 3: self = .perusahaan
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .unknown: return 0
    case .admin: return 1
    case .member: return 2
    case .perusahaan: return 3
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Loker_Level: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Loker_Level] = [
    .unknown,
    .admin,
    .member,
    .perusahaan,
  ]
}

#endif  // swift(>=4.2)

public struct Loker_User {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var id: Int32 {
    get {return _storage._id}
    set {_uniqueStorage()._id = newValue}
  }

  public var username: String {
    get {return _storage._username}
    set {_uniqueStorage()._username = newValue}
  }

  public var foto: String {
    get {return _storage._foto}
    set {_uniqueStorage()._foto = newValue}
  }

  public var tglDibuat: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _storage._tglDibuat ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_uniqueStorage()._tglDibuat = newValue}
  }
  /// Returns true if `tglDibuat` has been explicitly set.
  public var hasTglDibuat: Bool {return _storage._tglDibuat != nil}
  /// Clears the value of `tglDibuat`. Subsequent reads from it will return its default value.
  public mutating func clearTglDibuat() {_uniqueStorage()._tglDibuat = nil}

  public var level: Loker_Level {
    get {return _storage._level}
    set {_uniqueStorage()._level = newValue}
  }

  public var verifikasi: Bool {
    get {return _storage._verifikasi}
    set {_uniqueStorage()._verifikasi = newValue}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Loker_UserRequestId {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var id: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "loker"

extension Loker_Level: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "Level_UNKNOWN"),
    1: .same(proto: "ADMIN"),
    2: .same(proto: "MEMBER"),
    3: .same(proto: "PERUSAHAAN"),
  ]
}

extension Loker_User: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".User"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "username"),
    3: .same(proto: "foto"),
    4: .standard(proto: "tgl_dibuat"),
    5: .same(proto: "level"),
    6: .same(proto: "verifikasi"),
  ]

  fileprivate class _StorageClass {
    var _id: Int32 = 0
    var _username: String = String()
    var _foto: String = String()
    var _tglDibuat: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
    var _level: Loker_Level = .unknown
    var _verifikasi: Bool = false

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _id = source._id
      _username = source._username
      _foto = source._foto
      _tglDibuat = source._tglDibuat
      _level = source._level
      _verifikasi = source._verifikasi
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &_storage._id)
        case 2: try decoder.decodeSingularStringField(value: &_storage._username)
        case 3: try decoder.decodeSingularStringField(value: &_storage._foto)
        case 4: try decoder.decodeSingularMessageField(value: &_storage._tglDibuat)
        case 5: try decoder.decodeSingularEnumField(value: &_storage._level)
        case 6: try decoder.decodeSingularBoolField(value: &_storage._verifikasi)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._id != 0 {
        try visitor.visitSingularInt32Field(value: _storage._id, fieldNumber: 1)
      }
      if !_storage._username.isEmpty {
        try visitor.visitSingularStringField(value: _storage._username, fieldNumber: 2)
      }
      if !_storage._foto.isEmpty {
        try visitor.visitSingularStringField(value: _storage._foto, fieldNumber: 3)
      }
      if let v = _storage._tglDibuat {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      }
      if _storage._level != .unknown {
        try visitor.visitSingularEnumField(value: _storage._level, fieldNumber: 5)
      }
      if _storage._verifikasi != false {
        try visitor.visitSingularBoolField(value: _storage._verifikasi, fieldNumber: 6)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Loker_User, rhs: Loker_User) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._id != rhs_storage._id {return false}
        if _storage._username != rhs_storage._username {return false}
        if _storage._foto != rhs_storage._foto {return false}
        if _storage._tglDibuat != rhs_storage._tglDibuat {return false}
        if _storage._level != rhs_storage._level {return false}
        if _storage._verifikasi != rhs_storage._verifikasi {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Loker_UserRequestId: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".UserRequestId"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.id)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Loker_UserRequestId, rhs: Loker_UserRequestId) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
