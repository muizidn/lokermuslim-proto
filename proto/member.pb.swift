// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: member.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public struct Loker_Member {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var id: Int32 {
    get {return _storage._id}
    set {_uniqueStorage()._id = newValue}
  }

  public var idUser: Int32 {
    get {return _storage._idUser}
    set {_uniqueStorage()._idUser = newValue}
  }

  public var idPekerjaan: Int32 {
    get {return _storage._idPekerjaan}
    set {_uniqueStorage()._idPekerjaan = newValue}
  }

  public var coverProfile: String {
    get {return _storage._coverProfile}
    set {_uniqueStorage()._coverProfile = newValue}
  }

  public var namaLengkap: String {
    get {return _storage._namaLengkap}
    set {_uniqueStorage()._namaLengkap = newValue}
  }

  public var noKtp: String {
    get {return _storage._noKtp}
    set {_uniqueStorage()._noKtp = newValue}
  }

  public var deskripsiMember: String {
    get {return _storage._deskripsiMember}
    set {_uniqueStorage()._deskripsiMember = newValue}
  }

  public var kotaMember: String {
    get {return _storage._kotaMember}
    set {_uniqueStorage()._kotaMember = newValue}
  }

  public var provinsiMember: String {
    get {return _storage._provinsiMember}
    set {_uniqueStorage()._provinsiMember = newValue}
  }

  public var noHpMember: String {
    get {return _storage._noHpMember}
    set {_uniqueStorage()._noHpMember = newValue}
  }

  public var noWa: String {
    get {return _storage._noWa}
    set {_uniqueStorage()._noWa = newValue}
  }

  public var emailMember: String {
    get {return _storage._emailMember}
    set {_uniqueStorage()._emailMember = newValue}
  }

  public var alamat: String {
    get {return _storage._alamat}
    set {_uniqueStorage()._alamat = newValue}
  }

  public var scanKtp: String {
    get {return _storage._scanKtp}
    set {_uniqueStorage()._scanKtp = newValue}
  }

  public var skills: String {
    get {return _storage._skills}
    set {_uniqueStorage()._skills = newValue}
  }

  public var webPersonal: String {
    get {return _storage._webPersonal}
    set {_uniqueStorage()._webPersonal = newValue}
  }

  public var usia: Int32 {
    get {return _storage._usia}
    set {_uniqueStorage()._usia = newValue}
  }

  public var sudahBekerja: Bool {
    get {return _storage._sudahBekerja}
    set {_uniqueStorage()._sudahBekerja = newValue}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "loker"

extension Loker_Member: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Member"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .standard(proto: "id_user"),
    3: .standard(proto: "id_pekerjaan"),
    4: .standard(proto: "cover_profile"),
    5: .standard(proto: "nama_lengkap"),
    6: .standard(proto: "no_ktp"),
    7: .standard(proto: "deskripsi_member"),
    8: .standard(proto: "kota_member"),
    9: .standard(proto: "provinsi_member"),
    10: .standard(proto: "no_hp_member"),
    11: .standard(proto: "no_wa"),
    12: .standard(proto: "email_member"),
    13: .same(proto: "alamat"),
    14: .standard(proto: "scan_ktp"),
    15: .same(proto: "skills"),
    16: .standard(proto: "web_personal"),
    17: .same(proto: "usia"),
    18: .same(proto: "sudahBekerja"),
  ]

  fileprivate class _StorageClass {
    var _id: Int32 = 0
    var _idUser: Int32 = 0
    var _idPekerjaan: Int32 = 0
    var _coverProfile: String = String()
    var _namaLengkap: String = String()
    var _noKtp: String = String()
    var _deskripsiMember: String = String()
    var _kotaMember: String = String()
    var _provinsiMember: String = String()
    var _noHpMember: String = String()
    var _noWa: String = String()
    var _emailMember: String = String()
    var _alamat: String = String()
    var _scanKtp: String = String()
    var _skills: String = String()
    var _webPersonal: String = String()
    var _usia: Int32 = 0
    var _sudahBekerja: Bool = false

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _id = source._id
      _idUser = source._idUser
      _idPekerjaan = source._idPekerjaan
      _coverProfile = source._coverProfile
      _namaLengkap = source._namaLengkap
      _noKtp = source._noKtp
      _deskripsiMember = source._deskripsiMember
      _kotaMember = source._kotaMember
      _provinsiMember = source._provinsiMember
      _noHpMember = source._noHpMember
      _noWa = source._noWa
      _emailMember = source._emailMember
      _alamat = source._alamat
      _scanKtp = source._scanKtp
      _skills = source._skills
      _webPersonal = source._webPersonal
      _usia = source._usia
      _sudahBekerja = source._sudahBekerja
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &_storage._id)
        case 2: try decoder.decodeSingularInt32Field(value: &_storage._idUser)
        case 3: try decoder.decodeSingularInt32Field(value: &_storage._idPekerjaan)
        case 4: try decoder.decodeSingularStringField(value: &_storage._coverProfile)
        case 5: try decoder.decodeSingularStringField(value: &_storage._namaLengkap)
        case 6: try decoder.decodeSingularStringField(value: &_storage._noKtp)
        case 7: try decoder.decodeSingularStringField(value: &_storage._deskripsiMember)
        case 8: try decoder.decodeSingularStringField(value: &_storage._kotaMember)
        case 9: try decoder.decodeSingularStringField(value: &_storage._provinsiMember)
        case 10: try decoder.decodeSingularStringField(value: &_storage._noHpMember)
        case 11: try decoder.decodeSingularStringField(value: &_storage._noWa)
        case 12: try decoder.decodeSingularStringField(value: &_storage._emailMember)
        case 13: try decoder.decodeSingularStringField(value: &_storage._alamat)
        case 14: try decoder.decodeSingularStringField(value: &_storage._scanKtp)
        case 15: try decoder.decodeSingularStringField(value: &_storage._skills)
        case 16: try decoder.decodeSingularStringField(value: &_storage._webPersonal)
        case 17: try decoder.decodeSingularInt32Field(value: &_storage._usia)
        case 18: try decoder.decodeSingularBoolField(value: &_storage._sudahBekerja)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._id != 0 {
        try visitor.visitSingularInt32Field(value: _storage._id, fieldNumber: 1)
      }
      if _storage._idUser != 0 {
        try visitor.visitSingularInt32Field(value: _storage._idUser, fieldNumber: 2)
      }
      if _storage._idPekerjaan != 0 {
        try visitor.visitSingularInt32Field(value: _storage._idPekerjaan, fieldNumber: 3)
      }
      if !_storage._coverProfile.isEmpty {
        try visitor.visitSingularStringField(value: _storage._coverProfile, fieldNumber: 4)
      }
      if !_storage._namaLengkap.isEmpty {
        try visitor.visitSingularStringField(value: _storage._namaLengkap, fieldNumber: 5)
      }
      if !_storage._noKtp.isEmpty {
        try visitor.visitSingularStringField(value: _storage._noKtp, fieldNumber: 6)
      }
      if !_storage._deskripsiMember.isEmpty {
        try visitor.visitSingularStringField(value: _storage._deskripsiMember, fieldNumber: 7)
      }
      if !_storage._kotaMember.isEmpty {
        try visitor.visitSingularStringField(value: _storage._kotaMember, fieldNumber: 8)
      }
      if !_storage._provinsiMember.isEmpty {
        try visitor.visitSingularStringField(value: _storage._provinsiMember, fieldNumber: 9)
      }
      if !_storage._noHpMember.isEmpty {
        try visitor.visitSingularStringField(value: _storage._noHpMember, fieldNumber: 10)
      }
      if !_storage._noWa.isEmpty {
        try visitor.visitSingularStringField(value: _storage._noWa, fieldNumber: 11)
      }
      if !_storage._emailMember.isEmpty {
        try visitor.visitSingularStringField(value: _storage._emailMember, fieldNumber: 12)
      }
      if !_storage._alamat.isEmpty {
        try visitor.visitSingularStringField(value: _storage._alamat, fieldNumber: 13)
      }
      if !_storage._scanKtp.isEmpty {
        try visitor.visitSingularStringField(value: _storage._scanKtp, fieldNumber: 14)
      }
      if !_storage._skills.isEmpty {
        try visitor.visitSingularStringField(value: _storage._skills, fieldNumber: 15)
      }
      if !_storage._webPersonal.isEmpty {
        try visitor.visitSingularStringField(value: _storage._webPersonal, fieldNumber: 16)
      }
      if _storage._usia != 0 {
        try visitor.visitSingularInt32Field(value: _storage._usia, fieldNumber: 17)
      }
      if _storage._sudahBekerja != false {
        try visitor.visitSingularBoolField(value: _storage._sudahBekerja, fieldNumber: 18)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Loker_Member, rhs: Loker_Member) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._id != rhs_storage._id {return false}
        if _storage._idUser != rhs_storage._idUser {return false}
        if _storage._idPekerjaan != rhs_storage._idPekerjaan {return false}
        if _storage._coverProfile != rhs_storage._coverProfile {return false}
        if _storage._namaLengkap != rhs_storage._namaLengkap {return false}
        if _storage._noKtp != rhs_storage._noKtp {return false}
        if _storage._deskripsiMember != rhs_storage._deskripsiMember {return false}
        if _storage._kotaMember != rhs_storage._kotaMember {return false}
        if _storage._provinsiMember != rhs_storage._provinsiMember {return false}
        if _storage._noHpMember != rhs_storage._noHpMember {return false}
        if _storage._noWa != rhs_storage._noWa {return false}
        if _storage._emailMember != rhs_storage._emailMember {return false}
        if _storage._alamat != rhs_storage._alamat {return false}
        if _storage._scanKtp != rhs_storage._scanKtp {return false}
        if _storage._skills != rhs_storage._skills {return false}
        if _storage._webPersonal != rhs_storage._webPersonal {return false}
        if _storage._usia != rhs_storage._usia {return false}
        if _storage._sudahBekerja != rhs_storage._sudahBekerja {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
