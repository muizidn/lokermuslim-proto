// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: auth.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public struct Loker_LoginRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var email: String = String()

  public var password: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Loker_LoginResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var token: String {
    get {return _storage._token}
    set {_uniqueStorage()._token = newValue}
  }

  public var user: Loker_User {
    get {return _storage._user ?? Loker_User()}
    set {_uniqueStorage()._user = newValue}
  }
  /// Returns true if `user` has been explicitly set.
  public var hasUser: Bool {return _storage._user != nil}
  /// Clears the value of `user`. Subsequent reads from it will return its default value.
  public mutating func clearUser() {_uniqueStorage()._user = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Loker_PekerjaRegisterRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var fullname: String = String()

  public var email: String = String()

  public var provinsi: String = String()

  public var kabupatenKota: String = String()

  public var kodePos: String = String()

  public var pekerjaan: String = String()

  public var username: String = String()

  public var password: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Loker_PerusahaanRegisterRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var fullname: String = String()

  public var email: String = String()

  public var provinsi: String = String()

  public var kabupatenKota: String = String()

  public var namaPerusahaan: String = String()

  public var bidangIndustri: String = String()

  public var alamatPerusahaan: String = String()

  public var username: String = String()

  public var password: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "loker"

extension Loker_LoginRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".LoginRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "email"),
    2: .same(proto: "password"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.email)
      case 2: try decoder.decodeSingularStringField(value: &self.password)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.email.isEmpty {
      try visitor.visitSingularStringField(value: self.email, fieldNumber: 1)
    }
    if !self.password.isEmpty {
      try visitor.visitSingularStringField(value: self.password, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Loker_LoginRequest, rhs: Loker_LoginRequest) -> Bool {
    if lhs.email != rhs.email {return false}
    if lhs.password != rhs.password {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Loker_LoginResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".LoginResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "token"),
    2: .same(proto: "user"),
  ]

  fileprivate class _StorageClass {
    var _token: String = String()
    var _user: Loker_User? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _token = source._token
      _user = source._user
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularStringField(value: &_storage._token)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._user)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._token.isEmpty {
        try visitor.visitSingularStringField(value: _storage._token, fieldNumber: 1)
      }
      if let v = _storage._user {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Loker_LoginResponse, rhs: Loker_LoginResponse) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._token != rhs_storage._token {return false}
        if _storage._user != rhs_storage._user {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Loker_PekerjaRegisterRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".PekerjaRegisterRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "fullname"),
    2: .same(proto: "email"),
    3: .same(proto: "provinsi"),
    4: .same(proto: "kabupatenKota"),
    5: .same(proto: "kodePos"),
    6: .same(proto: "pekerjaan"),
    7: .same(proto: "username"),
    8: .same(proto: "password"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.fullname)
      case 2: try decoder.decodeSingularStringField(value: &self.email)
      case 3: try decoder.decodeSingularStringField(value: &self.provinsi)
      case 4: try decoder.decodeSingularStringField(value: &self.kabupatenKota)
      case 5: try decoder.decodeSingularStringField(value: &self.kodePos)
      case 6: try decoder.decodeSingularStringField(value: &self.pekerjaan)
      case 7: try decoder.decodeSingularStringField(value: &self.username)
      case 8: try decoder.decodeSingularStringField(value: &self.password)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.fullname.isEmpty {
      try visitor.visitSingularStringField(value: self.fullname, fieldNumber: 1)
    }
    if !self.email.isEmpty {
      try visitor.visitSingularStringField(value: self.email, fieldNumber: 2)
    }
    if !self.provinsi.isEmpty {
      try visitor.visitSingularStringField(value: self.provinsi, fieldNumber: 3)
    }
    if !self.kabupatenKota.isEmpty {
      try visitor.visitSingularStringField(value: self.kabupatenKota, fieldNumber: 4)
    }
    if !self.kodePos.isEmpty {
      try visitor.visitSingularStringField(value: self.kodePos, fieldNumber: 5)
    }
    if !self.pekerjaan.isEmpty {
      try visitor.visitSingularStringField(value: self.pekerjaan, fieldNumber: 6)
    }
    if !self.username.isEmpty {
      try visitor.visitSingularStringField(value: self.username, fieldNumber: 7)
    }
    if !self.password.isEmpty {
      try visitor.visitSingularStringField(value: self.password, fieldNumber: 8)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Loker_PekerjaRegisterRequest, rhs: Loker_PekerjaRegisterRequest) -> Bool {
    if lhs.fullname != rhs.fullname {return false}
    if lhs.email != rhs.email {return false}
    if lhs.provinsi != rhs.provinsi {return false}
    if lhs.kabupatenKota != rhs.kabupatenKota {return false}
    if lhs.kodePos != rhs.kodePos {return false}
    if lhs.pekerjaan != rhs.pekerjaan {return false}
    if lhs.username != rhs.username {return false}
    if lhs.password != rhs.password {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Loker_PerusahaanRegisterRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".PerusahaanRegisterRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "fullname"),
    2: .same(proto: "email"),
    3: .same(proto: "provinsi"),
    4: .same(proto: "kabupatenKota"),
    5: .same(proto: "namaPerusahaan"),
    6: .same(proto: "bidangIndustri"),
    7: .same(proto: "alamatPerusahaan"),
    8: .same(proto: "username"),
    9: .same(proto: "password"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.fullname)
      case 2: try decoder.decodeSingularStringField(value: &self.email)
      case 3: try decoder.decodeSingularStringField(value: &self.provinsi)
      case 4: try decoder.decodeSingularStringField(value: &self.kabupatenKota)
      case 5: try decoder.decodeSingularStringField(value: &self.namaPerusahaan)
      case 6: try decoder.decodeSingularStringField(value: &self.bidangIndustri)
      case 7: try decoder.decodeSingularStringField(value: &self.alamatPerusahaan)
      case 8: try decoder.decodeSingularStringField(value: &self.username)
      case 9: try decoder.decodeSingularStringField(value: &self.password)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.fullname.isEmpty {
      try visitor.visitSingularStringField(value: self.fullname, fieldNumber: 1)
    }
    if !self.email.isEmpty {
      try visitor.visitSingularStringField(value: self.email, fieldNumber: 2)
    }
    if !self.provinsi.isEmpty {
      try visitor.visitSingularStringField(value: self.provinsi, fieldNumber: 3)
    }
    if !self.kabupatenKota.isEmpty {
      try visitor.visitSingularStringField(value: self.kabupatenKota, fieldNumber: 4)
    }
    if !self.namaPerusahaan.isEmpty {
      try visitor.visitSingularStringField(value: self.namaPerusahaan, fieldNumber: 5)
    }
    if !self.bidangIndustri.isEmpty {
      try visitor.visitSingularStringField(value: self.bidangIndustri, fieldNumber: 6)
    }
    if !self.alamatPerusahaan.isEmpty {
      try visitor.visitSingularStringField(value: self.alamatPerusahaan, fieldNumber: 7)
    }
    if !self.username.isEmpty {
      try visitor.visitSingularStringField(value: self.username, fieldNumber: 8)
    }
    if !self.password.isEmpty {
      try visitor.visitSingularStringField(value: self.password, fieldNumber: 9)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Loker_PerusahaanRegisterRequest, rhs: Loker_PerusahaanRegisterRequest) -> Bool {
    if lhs.fullname != rhs.fullname {return false}
    if lhs.email != rhs.email {return false}
    if lhs.provinsi != rhs.provinsi {return false}
    if lhs.kabupatenKota != rhs.kabupatenKota {return false}
    if lhs.namaPerusahaan != rhs.namaPerusahaan {return false}
    if lhs.bidangIndustri != rhs.bidangIndustri {return false}
    if lhs.alamatPerusahaan != rhs.alamatPerusahaan {return false}
    if lhs.username != rhs.username {return false}
    if lhs.password != rhs.password {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
